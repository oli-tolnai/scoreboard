<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tournament Admin Panel</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .admin-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            backdrop-filter: blur(10px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            margin: 20px auto;
            padding: 30px;
        }

        .section-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .btn-custom {
            border-radius: 25px;
            padding: 10px 20px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-custom:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .view-controls {
            text-align: center;
            margin-bottom: 30px;
        }

        .view-btn {
            margin: 5px;
            min-width: 120px;
        }

        .animate-btn {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            border: none;
            color: white;
            margin-top: 15px;
        }

        .team-item, .task-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            margin: 5px 0;
            background: #f8f9fa;
            border-radius: 5px;
        }

        .score-input {
            width: 80px;
            text-align: center;
        }

        .current-view-indicator {
            font-size: 1.2em;
            font-weight: bold;
            color: #28a745;
            text-align: center;
            margin-bottom: 20px;
        }

        .status-indicator {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 10px 20px;
            border-radius: 25px;
            color: white;
            font-weight: bold;
        }

        .status-connected {
            background: #28a745;
        }

        .status-disconnected {
            background: #dc3545;
        }
    </style>
</head>
<body>
    <div id="statusIndicator" class="status-indicator status-disconnected">
        <i class="bi bi-wifi-off"></i> Disconnected
    </div>

    <div class="container">
        <div class="admin-container">
            <h1 class="text-center mb-4">
                <i class="bi bi-trophy-fill text-warning"></i> Tournament Admin Panel
            </h1>

            <!-- Current View Indicator -->
            <div id="currentViewIndicator" class="current-view-indicator">
                Current View: Logo
            </div>

            <!-- View Controls -->
            <div class="section-card">
                <h3><i class="bi bi-display"></i> Display Controls</h3>
                <div class="view-controls">
                    <button class="btn btn-primary btn-custom view-btn" onclick="changeView('logo')">
                        <i class="bi bi-image"></i> Logo View
                    </button>
                    <button class="btn btn-info btn-custom view-btn" onclick="changeView('table')">
                        <i class="bi bi-table"></i> Scores Table
                    </button>
                    <button class="btn btn-success btn-custom view-btn" onclick="changeView('scoreboard')">
                        <i class="bi bi-list-ol"></i> Scoreboard
                    </button>
                </div>
                <div class="text-center">
                    <button class="btn btn-custom animate-btn" onclick="animateScoreboard()">
                        <i class="bi bi-play-circle"></i> Animate Scoreboard
                    </button>
                </div>
            </div>

            <div class="row">
                <!-- Teams Management -->
                <div class="col-md-6">
                    <div class="section-card">
                        <h3><i class="bi bi-people-fill"></i> Teams Management</h3>
                        
                        <div class="mb-3">
                            <div class="input-group">
                                <input type="text" id="teamNameInput" class="form-control" placeholder="Team name">
                                <button class="btn btn-primary" onclick="addTeam()">
                                    <i class="bi bi-plus-circle"></i> Add Team
                                </button>
                            </div>
                        </div>

                        <div id="teamsList">
                            <!-- Teams will be populated here -->
                        </div>
                    </div>
                </div>

                <!-- Tasks Management -->
                <div class="col-md-6">
                    <div class="section-card">
                        <h3><i class="bi bi-list-task"></i> Tasks Management</h3>
                        
                        <div class="mb-3">
                            <div class="input-group">
                                <input type="text" id="taskNameInput" class="form-control" placeholder="Task name">
                                <input type="number" id="taskPointsInput" class="form-control" placeholder="Max points" min="0">
                                <button class="btn btn-primary" onclick="addTask()">
                                    <i class="bi bi-plus-circle"></i> Add Task
                                </button>
                            </div>
                        </div>

                        <div id="tasksList">
                            <!-- Tasks will be populated here -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Scoring Matrix -->
            <div class="section-card">
                <h3><i class="bi bi-grid-3x3-gap-fill"></i> Scoring Matrix</h3>
                <div class="table-responsive">
                    <table id="scoringTable" class="table table-striped">
                        <thead class="table-dark">
                            <tr>
                                <th>Team</th>
                                <!-- Task columns will be inserted here -->
                                <th>Total Score</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Scoring rows will be inserted here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
        const socket = io();
        let currentState = null;

        // Socket event listeners
        socket.on('connect', () => {
            console.log('Connected to server');
            updateStatusIndicator(true);
        });

        socket.on('disconnect', () => {
            console.log('Disconnected from server');
            updateStatusIndicator(false);
        });

        socket.on('stateUpdate', (state) => {
            console.log('State update received:', state);
            currentState = state;
            updateUI();
        });

        function updateStatusIndicator(connected) {
            const indicator = document.getElementById('statusIndicator');
            if (connected) {
                indicator.className = 'status-indicator status-connected';
                indicator.innerHTML = '<i class="bi bi-wifi"></i> Connected';
            } else {
                indicator.className = 'status-indicator status-disconnected';
                indicator.innerHTML = '<i class="bi bi-wifi-off"></i> Disconnected';
            }
        }

        function updateUI() {
            if (!currentState) return;

            updateCurrentViewIndicator();
            updateTeamsList();
            updateTasksList();
            updateScoringMatrix();
        }

        function updateCurrentViewIndicator() {
            const indicator = document.getElementById('currentViewIndicator');
            const viewNames = {
                'logo': 'Logo View',
                'table': 'Scores Table',
                'scoreboard': 'Scoreboard'
            };
            indicator.textContent = `Current View: ${viewNames[currentState.currentView] || 'Unknown'}`;
        }

        function updateTeamsList() {
            const container = document.getElementById('teamsList');
            container.innerHTML = '';

            currentState.teams.forEach(team => {
                const teamDiv = document.createElement('div');
                teamDiv.className = 'team-item';
                teamDiv.innerHTML = `
                    <span><i class="bi bi-people"></i> ${team.name}</span>
                    <button class="btn btn-danger btn-sm" onclick="deleteTeam('${team.id}')">
                        <i class="bi bi-trash"></i>
                    </button>
                `;
                container.appendChild(teamDiv);
            });
        }

        function updateTasksList() {
            const container = document.getElementById('tasksList');
            container.innerHTML = '';

            currentState.tasks.forEach(task => {
                const taskDiv = document.createElement('div');
                taskDiv.className = 'task-item';
                taskDiv.innerHTML = `
                    <span><i class="bi bi-clipboard-check"></i> ${task.name} (${task.maxPoints} pts)</span>
                    <button class="btn btn-danger btn-sm" onclick="deleteTask('${task.id}')">
                        <i class="bi bi-trash"></i>
                    </button>
                `;
                container.appendChild(taskDiv);
            });
        }

        function updateScoringMatrix() {
            const table = document.getElementById('scoringTable');
            const thead = table.querySelector('thead tr');
            const tbody = table.querySelector('tbody');

            // Clear existing content
            thead.innerHTML = '<th>Team</th>';
            tbody.innerHTML = '';

            // Add task columns
            currentState.tasks.forEach(task => {
                const th = document.createElement('th');
                th.textContent = task.name;
                thead.appendChild(th);
            });

            // Add total score column
            const totalTh = document.createElement('th');
            totalTh.textContent = 'Total Score';
            thead.appendChild(totalTh);

            // Add team rows
            currentState.teams.forEach(team => {
                const row = document.createElement('tr');
                
                // Team name
                const teamCell = document.createElement('td');
                teamCell.innerHTML = `<strong>${team.name}</strong>`;
                row.appendChild(teamCell);

                // Task score inputs
                currentState.tasks.forEach(task => {
                    const scoreCell = document.createElement('td');
                    const currentScore = team.scores[task.id] || 0;
                    scoreCell.innerHTML = `
                        <input type="number" 
                               class="form-control score-input" 
                               value="${currentScore}" 
                               min="0" 
                               max="${task.maxPoints}"
                               onchange="updateScore('${team.id}', '${task.id}', this.value)">
                    `;
                    row.appendChild(scoreCell);
                });

                // Total score
                const totalCell = document.createElement('td');
                totalCell.innerHTML = `<strong>${team.totalScore || 0}</strong>`;
                row.appendChild(totalCell);

                tbody.appendChild(row);
            });
        }

        // API functions
        async function addTeam() {
            const nameInput = document.getElementById('teamNameInput');
            const name = nameInput.value.trim();
            
            if (!name) {
                alert('Please enter a team name');
                return;
            }

            try {
                const response = await fetch('/api/tournament/teams', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ name }),
                });

                if (response.ok) {
                    nameInput.value = '';
                } else {
                    alert('Failed to add team');
                }
            } catch (error) {
                alert('Error adding team: ' + error.message);
            }
        }

        async function deleteTeam(teamId) {
            if (!confirm('Are you sure you want to delete this team?')) return;

            try {
                const response = await fetch(`/api/tournament/teams/${teamId}`, {
                    method: 'DELETE',
                });

                if (!response.ok) {
                    alert('Failed to delete team');
                }
            } catch (error) {
                alert('Error deleting team: ' + error.message);
            }
        }

        async function addTask() {
            const nameInput = document.getElementById('taskNameInput');
            const pointsInput = document.getElementById('taskPointsInput');
            const name = nameInput.value.trim();
            const maxPoints = parseInt(pointsInput.value);
            
            if (!name || !maxPoints || maxPoints < 0) {
                alert('Please enter a valid task name and points');
                return;
            }

            try {
                const response = await fetch('/api/tournament/tasks', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ name, maxPoints }),
                });

                if (response.ok) {
                    nameInput.value = '';
                    pointsInput.value = '';
                } else {
                    alert('Failed to add task');
                }
            } catch (error) {
                alert('Error adding task: ' + error.message);
            }
        }

        async function deleteTask(taskId) {
            if (!confirm('Are you sure you want to delete this task? All scores for this task will be lost.')) return;

            try {
                const response = await fetch(`/api/tournament/tasks/${taskId}`, {
                    method: 'DELETE',
                });

                if (!response.ok) {
                    alert('Failed to delete task');
                }
            } catch (error) {
                alert('Error deleting task: ' + error.message);
            }
        }

        async function updateScore(teamId, taskId, score) {
            const numScore = parseInt(score) || 0;

            try {
                const response = await fetch('/api/tournament/scores', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ teamId, taskId, score: numScore }),
                });

                if (!response.ok) {
                    alert('Failed to update score');
                }
            } catch (error) {
                alert('Error updating score: ' + error.message);
            }
        }

        async function changeView(view) {
            try {
                const response = await fetch('/api/tournament/view', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ view }),
                });

                if (!response.ok) {
                    alert('Failed to change view');
                }
            } catch (error) {
                alert('Error changing view: ' + error.message);
            }
        }

        async function animateScoreboard() {
            try {
                const response = await fetch('/api/tournament/animate-scoreboard', {
                    method: 'POST',
                });

                if (!response.ok) {
                    alert('Failed to animate scoreboard');
                }
            } catch (error) {
                alert('Error animating scoreboard: ' + error.message);
            }
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey) {
                switch (e.key) {
                    case '1':
                        e.preventDefault();
                        changeView('logo');
                        break;
                    case '2':
                        e.preventDefault();
                        changeView('table');
                        break;
                    case '3':
                        e.preventDefault();
                        changeView('scoreboard');
                        break;
                    case 'Enter':
                        e.preventDefault();
                        animateScoreboard();
                        break;
                }
            }
        });

        // Initialize
        updateUI();
    </script>
</body>
</html>
